
module controller(input logic [7:0] opcode,
                  input logic NFLG, ZFLG, reset, clk,
						output logic LOAD_AC, LOAD_IRU, LOAD_IRL, LOAD_PC, INCR_PC, FETCH, STORE_MEM, 
						output logic [2:0] STATE);
						
	typedef enum logic [2:0] {Start, PrepU, FetchU, PrepL, FetchL} statetype;
	statetype state, nextstate;
	
	// state switching
	always_ff @( negedge clk, posedge reset )
		if (reset) state <= Start;
		else       state <= nextstate;
	
	// state change flow
	always_comb
		case (state)
			Start:  nextstate = PrepU;
			PrepU:  nextstate = FetchU;
			FetchU: nextstate = PrepL;
			PrepL:  nextstate = FetchL;
			FetchL: nextstate = PrepU;
		endcase
		
	// control line assignments
	assign FETCH = (state == PrepU || state == FetchU || state == PrepL || state == FetchL);
	assign LOAD_IRU  = (state == FetchU);
	assign LOAD_IRL  = (state == FetchL);
	assign INCR_PC   = (state == FetchU || state == FetchL);
	assign STATE     = state;
	assign LOAD_AC   = (state == Start);
	assign STORE_MEM = 0;
	assign LOAD_PC   = 0;
						
endmodule

